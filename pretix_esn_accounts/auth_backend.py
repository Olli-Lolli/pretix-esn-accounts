import cas
import logging
from django.core.exceptions import ObjectDoesNotExist
from django.http import HttpResponse
from django.utils.translation import gettext_lazy as _
from pretix.base.auth import BaseAuthBackend
from pretix.base.models.auth import User
from pretix.control.views.auth import process_login
from pretix.helpers.urls import build_absolute_uri

from pretix_esn_accounts.esn_accounts_roles import EsnAccountsRole
from pretix_esn_accounts.models import EsnAccountsTeamAssignmentRule

logger = logging.getLogger(__name__)


class CasAuthBackend(BaseAuthBackend):
    """
    This class implements the interface for pluggable authentication modules used by pretix.
    """

    """
    A short and unique identifier for this authentication backend.
    This should only contain lowercase letters and in most cases will
    be the same as your package name.
    """
    identifier = "esn_accounts_sso"

    """
    A human-readable name of this authentication backend.
    """

    verbose_name = "ESN Accounts"

    def authentication_url(self, request):
        """
        This method will be called to populate the URL for the authentication method's tab on the login page.
        """
        cas_client = _get_cas_client()

        return cas_client.get_login_url()


def return_from_sso(request):
    """
    This function will be called when the user returns from the CAS server, presenting the ticket of the CAS server.
    """
    cas_response = __verify_cas(request)
    logger.debug("Received CAS response %s", cas_response)

    # If the ticket could not be verified, the response is {None, None, None}
    if cas_response[0] is None:
        return HttpResponse(_("Login failed"))

    try:
        user = _create_user(cas_response)
    except Exception as e:
        logger.error("Error creating user %s", e)
        return HttpResponse(_("CAS user data error"))

    try:
        _auto_assign_team(user, cas_response)
    except Exception as e:
        logger.warning("Error assigning user to team %s", e)

    return process_login(request, user, False)


def _get_cas_client():
    # This is the absolute URL of the view that receives the ticket from the client (generated by the CAS Server).
    return_address = build_absolute_uri("plugins:pretix_esn_accounts:cas.response")

    # The CASClient is created on every request because the domain of the pretix instance is not fixed.
    cas_client = cas.CASClient(
        version="2",
        server_url="https://accounts.esn.org/cas/",
        service_url=return_address,
    )
    return cas_client


def __verify_cas(request):
    cas_client = _get_cas_client()
    ticket = request.GET.get("ticket")

    # Validate ticket with CAS Server, receive user information.
    return cas_client.verify_ticket(ticket)


def _create_user(cas_response):
    email = cas_response[1]["mail"]
    username = cas_response[0]
    full_name = cas_response[1]["first"] + " " + cas_response[1]["last"]
    logger.debug("Username: %s, full name: %s, email: %s", username, full_name, email)

    return User.objects.get_or_create_for_backend(
        backend=CasAuthBackend.identifier,
        identifier=username,
        email=email,
        set_on_creation={"fullname": full_name},
        set_always={},
    )


def _auto_assign_team(user, cas_response):
    section = cas_response[1]["section"].strip().lower()
    section_code = cas_response[1]["sc"].strip().lower()
    roles = EsnAccountsRole.from_cas_list(cas_response[1]["roles"])
    logger.debug(
        "Section: %s, section code: %s, roles: %s", section, section_code, roles
    )

    teams = []
    for rule in EsnAccountsTeamAssignmentRule.objects.all():
        if (
            rule.esn_section.strip().lower() == section
            or rule.esn_section.strip().lower() == section_code
        ):
            for role in roles:
                if role.name in rule.local_roles:
                    teams.append(rule.team)
                    continue

    logger.debug("Teams: %s", teams)
    for team in teams:
        try:
            team.members.add(user)
        except ObjectDoesNotExist:
            pass
